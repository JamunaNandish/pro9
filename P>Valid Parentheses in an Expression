//stack problems
// Java program to check if parentheses are balanced
//[Expected Approach 1] Using Stack - O(n) Time and O(n) Space

import java.util.Stack;

class GfG {
    static boolean isBalanced(String s) {  

        // Declare a stack to store the opening brackets
        Stack<Character> st = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
          
            // Check if the character is an opening bracket
            if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[') {
                st.push(s.charAt(i)); 
            } 
            else {
              
                // If it's a closing bracket, check if the stack is non-empty
                // and if the top of the stack is a matching opening bracket
                if (!st.empty() && 
                    ((st.peek() == '(' && s.charAt(i) == ')') ||
                     (st.peek() == '{' && s.charAt(i) == '}') ||
                     (st.peek() == '[' && s.charAt(i) == ']'))) {
                    st.pop(); 
                }
                else {
                  
                    // Unmatched closing bracket
                    return false; 
                }
            }
        }
      
        // If stack is empty, return true (balanced), 
        // otherwise false
        return st.empty();
    }

    public static void main(String[] args) {
        String s = "{([])}";
        if (isBalanced(s))
            System.out.println("true");
        else
            System.out.println("false");
    }
}



//[Expected Approach 2] Without using Stack - O(n) Time and O(1) Space
//Instead of using actual Stack, we can uses the input string s itself to simulate stack behavior. We can use a top variable to keep track of the "top" of this virtual stack. This approach makes use of the existing string to avoid the need for additional memory to store stack elements.

//Note: Strings are immutable in Java, Python, C#, and JavaScript. Therefore, we cannot modify them in place, making this approach unsuitable for these languages.

// C++ program to check if parentheses are balanced
#include <bits/stdc++.h>
using namespace std;

// Check if characters match
bool checkMatch(char c1, char c2){
    if (c1 == '(' && c2 == ')') return true;
    if (c1 == '[' && c2 == ']') return true;
    if (c1 == '{' && c2 == '}') return true;
    return false;
}

// Check if parentheses are balanced
bool isBalanced(string& s){
  
    // Initialize top to -1
    int top = -1;
    for (int i = 0; i < s.length(); ++i){
      
        // Push char if stack is empty or no match
        if (top < 0 || !checkMatch(s[top], s[i])){
            ++top;
            s[top] = s[i];
        }
        else{
          
            // Pop from stack if match found
            --top;
        }
    }
  
    // Return true if stack is empty (balanced)
    return top == -1;
}

int main(){
    string s = "{([])}";
    cout << (isBalanced(s) ? "true" : "false") << endl;
    return 0;
}
